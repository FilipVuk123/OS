class Tetris
{
    field int x, y, angle, size, d, block_distance;
    constructor Tetris new()
    {
        let x = 512 / 2;
        let y = 256 / 2;
        let size = 20;
        let d = 5;
        let angle = 0; // 0, 1, 2, 3
        let block_distance = size + d;
        do loop();
        return this;
    }

    method void drawL0()
    {
        do Screen.drawRectangle(x - (size/2), y - (size/2), x + (size/2), y + (size/2)); // base
        do Screen.drawRectangle(x - (size/2), y - (size/2) - block_distance, x + (size/2), y + (size/2) - block_distance);
        do Screen.drawRectangle(x - (size/2), y - (size/2) - block_distance - block_distance, x + (size/2), y + (size/2) - block_distance- block_distance);
        do Screen.drawRectangle(x - (size/2) + block_distance, y - (size/2), x + (size/2) + block_distance, y + (size/2));
        return;   
    }

    method void drawL1()
    {
        do Screen.drawRectangle(x - (size/2), y - (size/2), x + (size/2), y + (size/2)); // base
        do Screen.drawRectangle(x - (size/2) + block_distance, y - (size/2), x + (size/2) + block_distance, y + (size/2)); 
        do Screen.drawRectangle(x - (size/2) + block_distance + block_distance, y - (size/2), x + (size/2) + block_distance + block_distance, y + (size/2));
        do Screen.drawRectangle(x - (size/2), y - (size/2) + block_distance, x + (size/2), y + (size/2) + block_distance);
        return;   
    }

    method void drawL2()
    {
        do Screen.drawRectangle(x - (size/2), y - (size/2), x + (size/2), y + (size/2)); // base
        do Screen.drawRectangle(x - (size/2), y - (size/2) + block_distance, x + (size/2), y + (size/2) + block_distance);
        do Screen.drawRectangle(x - (size/2), y - (size/2) + block_distance+ block_distance, x + (size/2), y + (size/2) + block_distance+ block_distance);
        do Screen.drawRectangle(x - (size/2) - block_distance, y - (size/2), x + (size/2) - block_distance, y + (size/2));
        return;   
    }

    method void drawL3()
    {
        do Screen.drawRectangle(x - (size/2), y - (size/2), x + (size/2), y + (size/2)); // base
        do Screen.drawRectangle(x - (size/2) - block_distance, y - (size/2), x + (size/2) - block_distance, y + (size/2)); 
        do Screen.drawRectangle(x - (size/2) - block_distance- block_distance, y - (size/2), x + (size/2) - block_distance- block_distance, y + (size/2));
        do Screen.drawRectangle(x - (size/2), y - (size/2) - block_distance, x + (size/2), y + (size/2) - block_distance);
        return;   
        
    }

    method void loop ()
    {
        while (~(Keyboard.keyPressed() = 140)) 
        {
            if (Keyboard.keyPressed() = 130)  // <<<
            {
                if ((x - block_distance) > (3*block_distance)){
                    let x = x - block_distance;
                    do Sys.wait(50);
                }
            }
            if (Keyboard.keyPressed() = 132)  // >>>
            {
                if ( (x + block_distance) < (512 - (3*block_distance))){
                    let x = x + block_distance;
                    do Sys.wait(50);
                }
            }
            if (Keyboard.keyPressed() = 131) // up
            {
                if ((y - block_distance) > (3*block_distance)){
                    let y = y - block_distance;
                    do Sys.wait(50);
                }
            }
            if (Keyboard.keyPressed() = 133) // down
            {
                if (y + block_distance < (256 - (3*block_distance))){
                    let y = y + block_distance;
                    do Sys.wait(50);
                }
            }
            if ((Keyboard.keyPressed() = 82) | (Keyboard.keyPressed() = 114)) 
            {
                let angle = angle + 1;
                if (angle = 4){
                    let angle = 0;
                }
                do Sys.wait(50);
            }
            
            do render();
        }
        do Sys.wait(2000);
        do Screen.clearScreen();
        return;
    }

    method void render()
    {
        do Screen.clearScreen();
        if (angle = 0){
            do drawL0();
        }
        if (angle = 1){
            do drawL1();
        }
        if (angle = 2){
            do drawL2();
        }
        if (angle = 3){
            do drawL3();
        }
        do Sys.wait(100);
        return;
    }

    method void dispose()
    {
        do Memory.deAlloc(this);
        return;
    }
}