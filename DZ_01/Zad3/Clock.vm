function Clock.new 0
push constant 7
call Memory.alloc 1
pop pointer 0
push constant 160
pop this 0
push constant 50
pop this 1
push constant 10
pop this 2
push this 2
push constant 2
call Math.divide 2
pop this 3
push this 1
push this 0
push constant 2
call Math.divide 2
add
pop this 4
push pointer 0
return
function Clock.render_clock 3
push argument 0
pop pointer 0
push this 1
push this 1
push this 0
push this 1
add
push this 1
call Screen.drawLine 4
pop temp 0
push this 1
push this 1
push this 1
push this 0
push this 1
add
call Screen.drawLine 4
pop temp 0
push this 0
push this 1
add
push this 1
push this 0
push this 1
add
push this 0
push this 1
add
call Screen.drawLine 4
pop temp 0
push this 1
push this 0
push this 1
add
push this 0
push this 1
add
push this 0
push this 1
add
call Screen.drawLine 4
pop temp 0
push this 1
push this 0
push constant 2
call Math.divide 2
add
push this 1
push this 1
push this 0
push constant 2
call Math.divide 2
add
push this 1
push this 2
add
call Screen.drawLine 4
pop temp 0
push this 1
push this 1
push this 0
push constant 2
call Math.divide 2
add
push this 1
push this 2
add
push this 1
push this 0
push constant 2
call Math.divide 2
add
call Screen.drawLine 4
pop temp 0
push this 1
push this 0
add
push this 1
push this 0
push constant 2
call Math.divide 2
add
push this 1
push this 0
add
push this 2
sub
push this 1
push this 0
push constant 2
call Math.divide 2
add
call Screen.drawLine 4
pop temp 0
push this 1
push this 0
push constant 2
call Math.divide 2
add
push this 1
push this 0
add
push this 1
push this 0
push constant 2
call Math.divide 2
add
push this 1
push this 0
add
push this 2
sub
call Screen.drawLine 4
pop temp 0
push this 1
push this 0
push constant 3
call Math.multiply 2
push constant 16
call Math.divide 2
add
push this 1
push this 1
push this 0
push constant 3
call Math.multiply 2
push constant 16
call Math.divide 2
add
push this 1
push this 3
add
call Screen.drawLine 4
pop temp 0
push this 1
push this 0
push constant 13
call Math.multiply 2
push constant 16
call Math.divide 2
add
push this 1
push this 1
push this 0
push constant 13
call Math.multiply 2
push constant 16
call Math.divide 2
add
push this 1
push this 3
add
call Screen.drawLine 4
pop temp 0
push this 1
push this 1
push this 0
push constant 3
call Math.multiply 2
push constant 16
call Math.divide 2
add
push this 1
push this 3
add
push this 1
push this 0
push constant 3
call Math.multiply 2
push constant 16
call Math.divide 2
add
call Screen.drawLine 4
pop temp 0
push this 1
push this 1
push this 0
push constant 13
call Math.multiply 2
push constant 16
call Math.divide 2
add
push this 1
push this 3
add
push this 1
push this 0
push constant 13
call Math.multiply 2
push constant 16
call Math.divide 2
add
call Screen.drawLine 4
pop temp 0
push this 1
push this 0
add
push this 1
push this 0
push constant 3
call Math.multiply 2
push constant 16
call Math.divide 2
add
push this 1
push this 0
add
push this 3
sub
push this 1
push this 0
push constant 3
call Math.multiply 2
push constant 16
call Math.divide 2
add
call Screen.drawLine 4
pop temp 0
push this 1
push this 0
add
push this 1
push this 0
push constant 13
call Math.multiply 2
push constant 16
call Math.divide 2
add
push this 1
push this 0
add
push this 3
sub
push this 1
push this 0
push constant 13
call Math.multiply 2
push constant 16
call Math.divide 2
add
call Screen.drawLine 4
pop temp 0
push this 1
push this 0
push constant 3
call Math.multiply 2
push constant 16
call Math.divide 2
add
push this 1
push this 0
add
push this 1
push this 0
push constant 3
call Math.multiply 2
push constant 16
call Math.divide 2
add
push this 1
push this 0
add
push this 3
sub
call Screen.drawLine 4
pop temp 0
push this 1
push this 0
push constant 13
call Math.multiply 2
push constant 16
call Math.divide 2
add
push this 1
push this 0
add
push this 1
push this 0
push constant 13
call Math.multiply 2
push constant 16
call Math.divide 2
add
push this 1
push this 0
add
push this 3
sub
call Screen.drawLine 4
pop temp 0
push this 0
push constant 15
call Math.divide 2
pop local 2
push this 6
push constant 52
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 1
pop local 1
push this 1
push this 0
push constant 2
call Math.divide 2
add
push constant 60
push this 6
sub
push local 2
call Math.multiply 2
sub
pop local 0
label IF_FALSE0
push this 6
push constant 8
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 1
pop local 1
push this 1
push this 0
push constant 2
call Math.divide 2
add
push this 6
push local 2
call Math.multiply 2
add
pop local 0
label IF_FALSE1
push this 6
push constant 7
gt
push this 6
push constant 23
lt
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 1
push this 0
add
pop local 0
push this 1
push this 0
push constant 2
call Math.divide 2
add
push constant 15
push this 6
sub
push local 2
call Math.multiply 2
sub
pop local 1
label IF_FALSE2
push this 6
push constant 22
gt
push this 6
push constant 38
lt
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push this 1
push this 0
add
pop local 1
push this 1
push this 0
push constant 2
call Math.divide 2
add
push constant 30
push this 6
sub
push local 2
call Math.multiply 2
add
pop local 0
label IF_FALSE3
push this 6
push constant 37
gt
push this 6
push constant 53
lt
and
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push this 1
pop local 0
push this 1
push this 0
push constant 2
call Math.divide 2
add
push constant 45
push this 6
sub
push local 2
call Math.multiply 2
add
pop local 1
label IF_FALSE4
push this 4
push this 4
push local 0
push local 1
call Screen.drawLine 4
pop temp 0
push this 5
push constant 11
eq
push this 5
push constant 0
eq
or
push this 5
push constant 1
eq
or
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push this 1
pop local 1
push this 5
push constant 11
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push this 1
push this 0
push constant 3
call Math.multiply 2
push constant 16
call Math.divide 2
add
pop local 0
label IF_FALSE6
push this 5
push constant 0
eq
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push this 1
push this 0
push constant 2
call Math.divide 2
add
pop local 0
label IF_FALSE7
push this 5
push constant 1
eq
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push this 1
push this 0
push constant 13
call Math.multiply 2
push constant 16
call Math.divide 2
add
pop local 0
label IF_FALSE8
label IF_FALSE5
push this 5
push constant 2
eq
push this 5
push constant 3
eq
or
push this 5
push constant 4
eq
or
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push this 1
push this 0
add
pop local 0
push this 5
push constant 2
eq
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push this 1
push this 0
push constant 3
call Math.multiply 2
push constant 16
call Math.divide 2
add
pop local 1
label IF_FALSE10
push this 5
push constant 3
eq
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push this 1
push this 0
push constant 2
call Math.divide 2
add
pop local 1
label IF_FALSE11
push this 5
push constant 4
eq
if-goto IF_TRUE12
goto IF_FALSE12
label IF_TRUE12
push this 1
push this 0
push constant 13
call Math.multiply 2
push constant 16
call Math.divide 2
add
pop local 1
label IF_FALSE12
label IF_FALSE9
push this 5
push constant 5
eq
push this 5
push constant 6
eq
or
push this 5
push constant 7
eq
or
if-goto IF_TRUE13
goto IF_FALSE13
label IF_TRUE13
push this 1
push this 0
add
pop local 1
push this 5
push constant 7
eq
if-goto IF_TRUE14
goto IF_FALSE14
label IF_TRUE14
push this 1
push this 0
push constant 3
call Math.multiply 2
push constant 16
call Math.divide 2
add
pop local 0
label IF_FALSE14
push this 5
push constant 6
eq
if-goto IF_TRUE15
goto IF_FALSE15
label IF_TRUE15
push this 1
push this 0
push constant 2
call Math.divide 2
add
pop local 0
label IF_FALSE15
push this 5
push constant 5
eq
if-goto IF_TRUE16
goto IF_FALSE16
label IF_TRUE16
push this 1
push this 0
push constant 13
call Math.multiply 2
push constant 16
call Math.divide 2
add
pop local 0
label IF_FALSE16
label IF_FALSE13
push this 5
push constant 8
eq
push this 5
push constant 9
eq
or
push this 5
push constant 10
eq
or
if-goto IF_TRUE17
goto IF_FALSE17
label IF_TRUE17
push this 1
pop local 0
push this 5
push constant 10
eq
if-goto IF_TRUE18
goto IF_FALSE18
label IF_TRUE18
push this 1
push this 0
push constant 3
call Math.multiply 2
push constant 16
call Math.divide 2
add
pop local 1
label IF_FALSE18
push this 5
push constant 9
eq
if-goto IF_TRUE19
goto IF_FALSE19
label IF_TRUE19
push this 1
push this 0
push constant 2
call Math.divide 2
add
pop local 1
label IF_FALSE19
push this 5
push constant 8
eq
if-goto IF_TRUE20
goto IF_FALSE20
label IF_TRUE20
push this 1
push this 0
push constant 13
call Math.multiply 2
push constant 16
call Math.divide 2
add
pop local 1
label IF_FALSE20
label IF_FALSE17
push this 4
push this 4
push local 0
push local 1
call Screen.drawLine 4
pop temp 0
push constant 0
return
function Clock.render 0
push argument 0
pop pointer 0
push constant 0
pop this 5
push constant 0
pop this 6
label WHILE_EXP0
push constant 0
not
not
if-goto WHILE_END0
push this 6
push constant 60
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 5
push constant 1
add
pop this 5
push constant 0
pop this 6
label IF_FALSE0
push this 5
push constant 12
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
pop this 5
label IF_FALSE1
push pointer 0
call Clock.render_clock 1
pop temp 0
push this 6
push constant 1
add
pop this 6
push constant 100
call Sys.wait 1
pop temp 0
call Screen.clearScreen 0
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
